### YamlMime:ManagedReference
items:
- uid: Harmony.HarmonyInstance
  commentId: T:Harmony.HarmonyInstance
  id: HarmonyInstance
  parent: Harmony
  children:
  - Harmony.HarmonyInstance.Create(System.String)
  - Harmony.HarmonyInstance.DEBUG
  - Harmony.HarmonyInstance.GetPatchedMethods
  - Harmony.HarmonyInstance.GetPatchInfo(MethodBase)
  - Harmony.HarmonyInstance.HasAnyPatches(System.String)
  - Harmony.HarmonyInstance.Id
  - Harmony.HarmonyInstance.Patch(MethodBase,Harmony.HarmonyMethod,Harmony.HarmonyMethod,Harmony.HarmonyMethod)
  - Harmony.HarmonyInstance.PatchAll
  - Harmony.HarmonyInstance.PatchAll(Assembly)
  - Harmony.HarmonyInstance.Unpatch(MethodBase,Harmony.HarmonyPatchType,System.String)
  - Harmony.HarmonyInstance.Unpatch(MethodBase,MethodInfo)
  - Harmony.HarmonyInstance.UnpatchAll(System.String)
  - Harmony.HarmonyInstance.VersionInfo(System.Version@)
  langs:
  - csharp
  - vb
  name: HarmonyInstance
  nameWithType: HarmonyInstance
  fullName: Harmony.HarmonyInstance
  type: Class
  source:
    id: HarmonyInstance
    path: ''
    startLine: 1266
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: A harmony instance.
  example: []
  syntax:
    content: public class HarmonyInstance
    content.vb: Public Class HarmonyInstance
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Harmony.HarmonyInstance.Id
  commentId: P:Harmony.HarmonyInstance.Id
  id: Id
  parent: Harmony.HarmonyInstance
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: HarmonyInstance.Id
  fullName: Harmony.HarmonyInstance.Id
  type: Property
  source:
    id: Id
    path: ''
    startLine: 1273
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Gets the identifier.
  example: []
  syntax:
    content: public string Id { get; }
    parameters: []
    return:
      type: System.String
      description: The identifier.
    content.vb: Public ReadOnly Property Id As String
  overload: Harmony.HarmonyInstance.Id*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Harmony.HarmonyInstance.DEBUG
  commentId: F:Harmony.HarmonyInstance.DEBUG
  id: DEBUG
  parent: Harmony.HarmonyInstance
  langs:
  - csharp
  - vb
  name: DEBUG
  nameWithType: HarmonyInstance.DEBUG
  fullName: Harmony.HarmonyInstance.DEBUG
  type: Field
  source:
    id: DEBUG
    path: ''
    startLine: 1276
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: True to debug.
  example: []
  syntax:
    content: public static bool DEBUG
    return:
      type: System.Boolean
    content.vb: Public Shared DEBUG As Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Harmony.HarmonyInstance.Create(System.String)
  commentId: M:Harmony.HarmonyInstance.Create(System.String)
  id: Create(System.String)
  parent: Harmony.HarmonyInstance
  langs:
  - csharp
  - vb
  name: Create(String)
  nameWithType: HarmonyInstance.Create(String)
  fullName: Harmony.HarmonyInstance.Create(System.String)
  type: Method
  source:
    id: Create
    path: ''
    startLine: 1311
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Creates a new HarmonyInstance.
  example: []
  syntax:
    content: public static HarmonyInstance Create(string id)
    parameters:
    - id: id
      type: System.String
      description: The identifier.
    return:
      type: Harmony.HarmonyInstance
      description: A HarmonyInstance.
    content.vb: Public Shared Function Create(id As String) As HarmonyInstance
  overload: Harmony.HarmonyInstance.Create*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: Thrown when an exception error condition occurs.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Harmony.HarmonyInstance.PatchAll
  commentId: M:Harmony.HarmonyInstance.PatchAll
  id: PatchAll
  parent: Harmony.HarmonyInstance
  langs:
  - csharp
  - vb
  name: PatchAll()
  nameWithType: HarmonyInstance.PatchAll()
  fullName: Harmony.HarmonyInstance.PatchAll()
  type: Method
  source:
    id: PatchAll
    path: ''
    startLine: 1330
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Patch all.
  example: []
  syntax:
    content: public void PatchAll()
    content.vb: Public Sub PatchAll
  overload: Harmony.HarmonyInstance.PatchAll*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.HarmonyInstance.PatchAll(Assembly)
  commentId: M:Harmony.HarmonyInstance.PatchAll(Assembly)
  id: PatchAll(Assembly)
  parent: Harmony.HarmonyInstance
  langs:
  - csharp
  - vb
  name: PatchAll(Assembly)
  nameWithType: HarmonyInstance.PatchAll(Assembly)
  fullName: Harmony.HarmonyInstance.PatchAll(Assembly)
  type: Method
  source:
    id: PatchAll
    path: ''
    startLine: 1340
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Patch all.
  example: []
  syntax:
    content: public void PatchAll(Assembly assembly)
    parameters:
    - id: assembly
      type: Assembly
      description: The assembly.
    content.vb: Public Sub PatchAll(assembly As Assembly)
  overload: Harmony.HarmonyInstance.PatchAll*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.HarmonyInstance.Patch(MethodBase,Harmony.HarmonyMethod,Harmony.HarmonyMethod,Harmony.HarmonyMethod)
  commentId: M:Harmony.HarmonyInstance.Patch(MethodBase,Harmony.HarmonyMethod,Harmony.HarmonyMethod,Harmony.HarmonyMethod)
  id: Patch(MethodBase,Harmony.HarmonyMethod,Harmony.HarmonyMethod,Harmony.HarmonyMethod)
  parent: Harmony.HarmonyInstance
  langs:
  - csharp
  - vb
  name: Patch(MethodBase, HarmonyMethod, HarmonyMethod, HarmonyMethod)
  nameWithType: HarmonyInstance.Patch(MethodBase, HarmonyMethod, HarmonyMethod, HarmonyMethod)
  fullName: Harmony.HarmonyInstance.Patch(MethodBase, Harmony.HarmonyMethod, Harmony.HarmonyMethod, Harmony.HarmonyMethod)
  type: Method
  source:
    id: Patch
    path: ''
    startLine: 1361
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Patches.
  example: []
  syntax:
    content: public DynamicMethod Patch(MethodBase original, HarmonyMethod prefix = null, HarmonyMethod postfix = null, HarmonyMethod transpiler = null)
    parameters:
    - id: original
      type: MethodBase
      description: The original.
    - id: prefix
      type: Harmony.HarmonyMethod
      description: (Optional) The prefix.
    - id: postfix
      type: Harmony.HarmonyMethod
      description: (Optional) The postfix.
    - id: transpiler
      type: Harmony.HarmonyMethod
      description: (Optional) The transpiler.
    return:
      type: DynamicMethod
      description: A DynamicMethod.
    content.vb: Public Function Patch(original As MethodBase, prefix As HarmonyMethod = Nothing, postfix As HarmonyMethod = Nothing, transpiler As HarmonyMethod = Nothing) As DynamicMethod
  overload: Harmony.HarmonyInstance.Patch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.HarmonyInstance.UnpatchAll(System.String)
  commentId: M:Harmony.HarmonyInstance.UnpatchAll(System.String)
  id: UnpatchAll(System.String)
  parent: Harmony.HarmonyInstance
  langs:
  - csharp
  - vb
  name: UnpatchAll(String)
  nameWithType: HarmonyInstance.UnpatchAll(String)
  fullName: Harmony.HarmonyInstance.UnpatchAll(System.String)
  type: Method
  source:
    id: UnpatchAll
    path: ''
    startLine: 1370
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Unpatch all.
  example: []
  syntax:
    content: public void UnpatchAll(string harmonyID = null)
    parameters:
    - id: harmonyID
      type: System.String
      description: (Optional) Identifier for the harmony.
    content.vb: Public Sub UnpatchAll(harmonyID As String = Nothing)
  overload: Harmony.HarmonyInstance.UnpatchAll*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.HarmonyInstance.Unpatch(MethodBase,Harmony.HarmonyPatchType,System.String)
  commentId: M:Harmony.HarmonyInstance.Unpatch(MethodBase,Harmony.HarmonyPatchType,System.String)
  id: Unpatch(MethodBase,Harmony.HarmonyPatchType,System.String)
  parent: Harmony.HarmonyInstance
  langs:
  - csharp
  - vb
  name: Unpatch(MethodBase, HarmonyPatchType, String)
  nameWithType: HarmonyInstance.Unpatch(MethodBase, HarmonyPatchType, String)
  fullName: Harmony.HarmonyInstance.Unpatch(MethodBase, Harmony.HarmonyPatchType, System.String)
  type: Method
  source:
    id: Unpatch
    path: ''
    startLine: 1389
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Unpatches.
  example: []
  syntax:
    content: public void Unpatch(MethodBase original, HarmonyPatchType type, string harmonyID = null)
    parameters:
    - id: original
      type: MethodBase
      description: The original.
    - id: type
      type: Harmony.HarmonyPatchType
      description: The type.
    - id: harmonyID
      type: System.String
      description: (Optional) Identifier for the harmony.
    content.vb: Public Sub Unpatch(original As MethodBase, type As HarmonyPatchType, harmonyID As String = Nothing)
  overload: Harmony.HarmonyInstance.Unpatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.HarmonyInstance.Unpatch(MethodBase,MethodInfo)
  commentId: M:Harmony.HarmonyInstance.Unpatch(MethodBase,MethodInfo)
  id: Unpatch(MethodBase,MethodInfo)
  parent: Harmony.HarmonyInstance
  langs:
  - csharp
  - vb
  name: Unpatch(MethodBase, MethodInfo)
  nameWithType: HarmonyInstance.Unpatch(MethodBase, MethodInfo)
  fullName: Harmony.HarmonyInstance.Unpatch(MethodBase, MethodInfo)
  type: Method
  source:
    id: Unpatch
    path: ''
    startLine: 1399
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Unpatches.
  example: []
  syntax:
    content: public void Unpatch(MethodBase original, MethodInfo patch)
    parameters:
    - id: original
      type: MethodBase
      description: The original.
    - id: patch
      type: MethodInfo
      description: The patch.
    content.vb: Public Sub Unpatch(original As MethodBase, patch As MethodInfo)
  overload: Harmony.HarmonyInstance.Unpatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.HarmonyInstance.HasAnyPatches(System.String)
  commentId: M:Harmony.HarmonyInstance.HasAnyPatches(System.String)
  id: HasAnyPatches(System.String)
  parent: Harmony.HarmonyInstance
  langs:
  - csharp
  - vb
  name: HasAnyPatches(String)
  nameWithType: HarmonyInstance.HasAnyPatches(String)
  fullName: Harmony.HarmonyInstance.HasAnyPatches(System.String)
  type: Method
  source:
    id: HasAnyPatches
    path: ''
    startLine: 1409
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Query if &apos;harmonyID&apos; has any patches.
  example: []
  syntax:
    content: public bool HasAnyPatches(string harmonyID)
    parameters:
    - id: harmonyID
      type: System.String
      description: Identifier for the harmony.
    return:
      type: System.Boolean
      description: True if any patches, false if not.
    content.vb: Public Function HasAnyPatches(harmonyID As String) As Boolean
  overload: Harmony.HarmonyInstance.HasAnyPatches*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.HarmonyInstance.GetPatchInfo(MethodBase)
  commentId: M:Harmony.HarmonyInstance.GetPatchInfo(MethodBase)
  id: GetPatchInfo(MethodBase)
  parent: Harmony.HarmonyInstance
  langs:
  - csharp
  - vb
  name: GetPatchInfo(MethodBase)
  nameWithType: HarmonyInstance.GetPatchInfo(MethodBase)
  fullName: Harmony.HarmonyInstance.GetPatchInfo(MethodBase)
  type: Method
  source:
    id: GetPatchInfo
    path: ''
    startLine: 1420
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Gets patch information.
  example: []
  syntax:
    content: public Patches GetPatchInfo(MethodBase method)
    parameters:
    - id: method
      type: MethodBase
      description: The method.
    return:
      type: Harmony.Patches
      description: The patch information.
    content.vb: Public Function GetPatchInfo(method As MethodBase) As Patches
  overload: Harmony.HarmonyInstance.GetPatchInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.HarmonyInstance.GetPatchedMethods
  commentId: M:Harmony.HarmonyInstance.GetPatchedMethods
  id: GetPatchedMethods
  parent: Harmony.HarmonyInstance
  langs:
  - csharp
  - vb
  name: GetPatchedMethods()
  nameWithType: HarmonyInstance.GetPatchedMethods()
  fullName: Harmony.HarmonyInstance.GetPatchedMethods()
  type: Method
  source:
    id: GetPatchedMethods
    path: ''
    startLine: 1428
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Gets the patched methods in this collection.
  example: []
  syntax:
    content: public IEnumerable<MethodBase> GetPatchedMethods()
    return:
      type: System.Collections.Generic.IEnumerable{MethodBase}
      description: An enumerator that allows foreach to be used to process the patched methods in this collection.
    content.vb: Public Function GetPatchedMethods As IEnumerable(Of MethodBase)
  overload: Harmony.HarmonyInstance.GetPatchedMethods*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.HarmonyInstance.VersionInfo(System.Version@)
  commentId: M:Harmony.HarmonyInstance.VersionInfo(System.Version@)
  id: VersionInfo(System.Version@)
  parent: Harmony.HarmonyInstance
  langs:
  - csharp
  - vb
  name: VersionInfo(out Version)
  nameWithType: HarmonyInstance.VersionInfo(out Version)
  fullName: Harmony.HarmonyInstance.VersionInfo(out System.Version)
  type: Method
  source:
    id: VersionInfo
    path: ''
    startLine: 1437
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Version information.
  example: []
  syntax:
    content: public Dictionary<string, Version> VersionInfo(out Version currentVersion)
    parameters:
    - id: currentVersion
      type: System.Version
      description: '[out] The current version.'
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Version}
      description: A Dictionary&lt;string,Version>
    content.vb: Public Function VersionInfo(ByRef currentVersion As Version) As Dictionary(Of String, Version)
  overload: Harmony.HarmonyInstance.VersionInfo*
  nameWithType.vb: HarmonyInstance.VersionInfo(ByRef Version)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Harmony.HarmonyInstance.VersionInfo(ByRef System.Version)
  name.vb: VersionInfo(ByRef Version)
references:
- uid: Harmony
  commentId: N:Harmony
  name: Harmony
  nameWithType: Harmony
  fullName: Harmony
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Harmony.HarmonyInstance.Id*
  commentId: Overload:Harmony.HarmonyInstance.Id
  name: Id
  nameWithType: HarmonyInstance.Id
  fullName: Harmony.HarmonyInstance.Id
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Exception
  commentId: T:System.Exception
  isExternal: true
- uid: Harmony.HarmonyInstance.Create*
  commentId: Overload:Harmony.HarmonyInstance.Create
  name: Create
  nameWithType: HarmonyInstance.Create
  fullName: Harmony.HarmonyInstance.Create
- uid: Harmony.HarmonyInstance
  commentId: T:Harmony.HarmonyInstance
  parent: Harmony
  name: HarmonyInstance
  nameWithType: HarmonyInstance
  fullName: Harmony.HarmonyInstance
- uid: Harmony.HarmonyInstance.PatchAll*
  commentId: Overload:Harmony.HarmonyInstance.PatchAll
  name: PatchAll
  nameWithType: HarmonyInstance.PatchAll
  fullName: Harmony.HarmonyInstance.PatchAll
- uid: Assembly
  commentId: '!:Assembly'
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: Assembly
- uid: Harmony.HarmonyInstance.Patch*
  commentId: Overload:Harmony.HarmonyInstance.Patch
  name: Patch
  nameWithType: HarmonyInstance.Patch
  fullName: Harmony.HarmonyInstance.Patch
- uid: MethodBase
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: MethodBase
- uid: Harmony.HarmonyMethod
  commentId: T:Harmony.HarmonyMethod
  parent: Harmony
  name: HarmonyMethod
  nameWithType: HarmonyMethod
  fullName: Harmony.HarmonyMethod
- uid: DynamicMethod
  isExternal: true
  name: DynamicMethod
  nameWithType: DynamicMethod
  fullName: DynamicMethod
- uid: Harmony.HarmonyInstance.UnpatchAll*
  commentId: Overload:Harmony.HarmonyInstance.UnpatchAll
  name: UnpatchAll
  nameWithType: HarmonyInstance.UnpatchAll
  fullName: Harmony.HarmonyInstance.UnpatchAll
- uid: Harmony.HarmonyInstance.Unpatch*
  commentId: Overload:Harmony.HarmonyInstance.Unpatch
  name: Unpatch
  nameWithType: HarmonyInstance.Unpatch
  fullName: Harmony.HarmonyInstance.Unpatch
- uid: Harmony.HarmonyPatchType
  commentId: T:Harmony.HarmonyPatchType
  parent: Harmony
  name: HarmonyPatchType
  nameWithType: HarmonyPatchType
  fullName: Harmony.HarmonyPatchType
- uid: MethodInfo
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: MethodInfo
- uid: Harmony.HarmonyInstance.HasAnyPatches*
  commentId: Overload:Harmony.HarmonyInstance.HasAnyPatches
  name: HasAnyPatches
  nameWithType: HarmonyInstance.HasAnyPatches
  fullName: Harmony.HarmonyInstance.HasAnyPatches
- uid: Harmony.HarmonyInstance.GetPatchInfo*
  commentId: Overload:Harmony.HarmonyInstance.GetPatchInfo
  name: GetPatchInfo
  nameWithType: HarmonyInstance.GetPatchInfo
  fullName: Harmony.HarmonyInstance.GetPatchInfo
- uid: Harmony.Patches
  commentId: T:Harmony.Patches
  parent: Harmony
  name: Patches
  nameWithType: Patches
  fullName: Harmony.Patches
- uid: Harmony.HarmonyInstance.GetPatchedMethods*
  commentId: Overload:Harmony.HarmonyInstance.GetPatchedMethods
  name: GetPatchedMethods
  nameWithType: HarmonyInstance.GetPatchedMethods
  fullName: Harmony.HarmonyInstance.GetPatchedMethods
- uid: System.Collections.Generic.IEnumerable{MethodBase}
  commentId: T:System.Collections.Generic.IEnumerable{MethodBase}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MethodBase>
  nameWithType: IEnumerable<MethodBase>
  fullName: System.Collections.Generic.IEnumerable<MethodBase>
  nameWithType.vb: IEnumerable(Of MethodBase)
  fullName.vb: System.Collections.Generic.IEnumerable(Of MethodBase)
  name.vb: IEnumerable(Of MethodBase)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MethodBase
    name: MethodBase
    nameWithType: MethodBase
    fullName: MethodBase
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MethodBase
    name: MethodBase
    nameWithType: MethodBase
    fullName: MethodBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Harmony.HarmonyInstance.VersionInfo*
  commentId: Overload:Harmony.HarmonyInstance.VersionInfo
  name: VersionInfo
  nameWithType: HarmonyInstance.VersionInfo
  fullName: Harmony.HarmonyInstance.VersionInfo
- uid: System.Version
  commentId: T:System.Version
  parent: System
  isExternal: true
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Collections.Generic.Dictionary{System.String,System.Version}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Version}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Version>
  nameWithType: Dictionary<String, Version>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Version>
  nameWithType.vb: Dictionary(Of String, Version)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Version)
  name.vb: Dictionary(Of String, Version)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Version
    name: Version
    nameWithType: Version
    fullName: System.Version
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Version
    name: Version
    nameWithType: Version
    fullName: System.Version
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
