### YamlMime:ManagedReference
items:
- uid: Harmony.HarmonyAfter
  commentId: T:Harmony.HarmonyAfter
  id: HarmonyAfter
  parent: Harmony
  children:
  - Harmony.HarmonyAfter.#ctor(System.String[])
  langs:
  - csharp
  - vb
  name: HarmonyAfter
  nameWithType: HarmonyAfter
  fullName: Harmony.HarmonyAfter
  type: Class
  source:
    id: HarmonyAfter
    path: ''
    startLine: 334
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: A harmony after.
  example: []
  syntax:
    content: >-
      [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)]

      public class HarmonyAfter : HarmonyAttribute, _Attribute
    content.vb: >-
      <AttributeUsage(AttributeTargets.Class Or AttributeTargets.Method)>

      Public Class HarmonyAfter
          Inherits HarmonyAttribute
          Implements _Attribute
  inheritance:
  - System.Object
  - System.Attribute
  - Harmony.HarmonyAttribute
  inheritedMembers:
  - Harmony.HarmonyAttribute.info
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 68
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Harmony.HarmonyAfter.#ctor(System.String[])
  commentId: M:Harmony.HarmonyAfter.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: Harmony.HarmonyAfter
  langs:
  - csharp
  - vb
  name: HarmonyAfter(String[])
  nameWithType: HarmonyAfter.HarmonyAfter(String[])
  fullName: Harmony.HarmonyAfter.HarmonyAfter(System.String[])
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 340
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Constructor.
  example: []
  syntax:
    content: public HarmonyAfter(params string[] after)
    parameters:
    - id: after
      type: System.String[]
      description: A variable-length parameters list containing after.
    content.vb: Public Sub New(ParamArray after As String())
  overload: Harmony.HarmonyAfter.#ctor*
  nameWithType.vb: HarmonyAfter.HarmonyAfter(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Harmony.HarmonyAfter.HarmonyAfter(System.String())
  name.vb: HarmonyAfter(String())
references:
- uid: Harmony
  commentId: N:Harmony
  name: Harmony
  nameWithType: Harmony
  fullName: Harmony
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Attribute
  commentId: T:System.Attribute
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute
- uid: Harmony.HarmonyAttribute
  commentId: T:Harmony.HarmonyAttribute
  parent: Harmony
  name: HarmonyAttribute
  nameWithType: HarmonyAttribute
  fullName: Harmony.HarmonyAttribute
- uid: Harmony.HarmonyAttribute.info
  commentId: F:Harmony.HarmonyAttribute.info
  parent: Harmony.HarmonyAttribute
  name: info
  nameWithType: HarmonyAttribute.info
  fullName: Harmony.HarmonyAttribute.info
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Harmony.HarmonyAfter.#ctor*
  commentId: Overload:Harmony.HarmonyAfter.#ctor
  name: HarmonyAfter
  nameWithType: HarmonyAfter.HarmonyAfter
  fullName: Harmony.HarmonyAfter.HarmonyAfter
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
