### YamlMime:ManagedReference
items:
- uid: Harmony.Traverse
  commentId: T:Harmony.Traverse
  id: Traverse
  parent: Harmony
  children:
  - Harmony.Traverse.#ctor(System.Object)
  - Harmony.Traverse.#ctor(System.Type)
  - Harmony.Traverse.CopyFields
  - Harmony.Traverse.Create(System.Object)
  - Harmony.Traverse.Create(System.Type)
  - Harmony.Traverse.Create``1
  - Harmony.Traverse.CreateWithType(System.String)
  - Harmony.Traverse.Field(System.String)
  - Harmony.Traverse.Field``1(System.String)
  - Harmony.Traverse.FieldExists
  - Harmony.Traverse.Fields
  - Harmony.Traverse.GetValue
  - Harmony.Traverse.GetValue(System.Object[])
  - Harmony.Traverse.GetValue``1
  - Harmony.Traverse.GetValue``1(System.Object[])
  - Harmony.Traverse.GetValueType
  - Harmony.Traverse.IterateFields(System.Object,System.Action{Harmony.Traverse})
  - Harmony.Traverse.IterateFields(System.Object,System.Object,System.Action{Harmony.Traverse,Harmony.Traverse})
  - Harmony.Traverse.IterateFields(System.Object,System.Object,System.Action{System.String,Harmony.Traverse,Harmony.Traverse})
  - Harmony.Traverse.IterateProperties(System.Object,System.Action{Harmony.Traverse})
  - Harmony.Traverse.IterateProperties(System.Object,System.Object,System.Action{Harmony.Traverse,Harmony.Traverse})
  - Harmony.Traverse.IterateProperties(System.Object,System.Object,System.Action{System.String,Harmony.Traverse,Harmony.Traverse})
  - Harmony.Traverse.Method(System.String,System.Object[])
  - Harmony.Traverse.Method(System.String,System.Type[],System.Object[])
  - Harmony.Traverse.MethodExists
  - Harmony.Traverse.Methods
  - Harmony.Traverse.Properties
  - Harmony.Traverse.Property(System.String,System.Object[])
  - Harmony.Traverse.Property``1(System.String,System.Object[])
  - Harmony.Traverse.SetValue(System.Object)
  - Harmony.Traverse.ToString
  - Harmony.Traverse.Type(System.String)
  - Harmony.Traverse.TypeExists
  langs:
  - csharp
  - vb
  name: Traverse
  nameWithType: Traverse
  fullName: Harmony.Traverse
  type: Class
  source:
    id: Traverse
    path: ''
    startLine: 3073
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: A traverse.
  example: []
  syntax:
    content: public class Traverse
    content.vb: Public Class Traverse
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Harmony.Traverse.Create(System.Type)
  commentId: M:Harmony.Traverse.Create(System.Type)
  id: Create(System.Type)
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: Create(Type)
  nameWithType: Traverse.Create(Type)
  fullName: Harmony.Traverse.Create(System.Type)
  type: Method
  source:
    id: Create
    path: ''
    startLine: 3094
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Creates a new Traverse.
  example: []
  syntax:
    content: public static Traverse Create(Type type)
    parameters:
    - id: type
      type: System.Type
      description: The type.
    return:
      type: Harmony.Traverse
      description: A Traverse.
    content.vb: Public Shared Function Create(type As Type) As Traverse
  overload: Harmony.Traverse.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Harmony.Traverse.Create``1
  commentId: M:Harmony.Traverse.Create``1
  id: Create``1
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: Create<T>()
  nameWithType: Traverse.Create<T>()
  fullName: Harmony.Traverse.Create<T>()
  type: Method
  source:
    id: Create
    path: ''
    startLine: 3103
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Creates a new Traverse.
  example: []
  syntax:
    content: public static Traverse Create<T>()
    typeParameters:
    - id: T
      description: Generic type parameter.
    return:
      type: Harmony.Traverse
      description: A Traverse.
    content.vb: Public Shared Function Create(Of T) As Traverse
  overload: Harmony.Traverse.Create*
  nameWithType.vb: Traverse.Create(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Harmony.Traverse.Create(Of T)()
  name.vb: Create(Of T)()
- uid: Harmony.Traverse.Create(System.Object)
  commentId: M:Harmony.Traverse.Create(System.Object)
  id: Create(System.Object)
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: Create(Object)
  nameWithType: Traverse.Create(Object)
  fullName: Harmony.Traverse.Create(System.Object)
  type: Method
  source:
    id: Create
    path: ''
    startLine: 3112
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Creates a new Traverse.
  example: []
  syntax:
    content: public static Traverse Create(object root)
    parameters:
    - id: root
      type: System.Object
      description: The root.
    return:
      type: Harmony.Traverse
      description: A Traverse.
    content.vb: Public Shared Function Create(root As Object) As Traverse
  overload: Harmony.Traverse.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Harmony.Traverse.CreateWithType(System.String)
  commentId: M:Harmony.Traverse.CreateWithType(System.String)
  id: CreateWithType(System.String)
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: CreateWithType(String)
  nameWithType: Traverse.CreateWithType(String)
  fullName: Harmony.Traverse.CreateWithType(System.String)
  type: Method
  source:
    id: CreateWithType
    path: ''
    startLine: 3121
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Creates with type.
  example: []
  syntax:
    content: public static Traverse CreateWithType(string name)
    parameters:
    - id: name
      type: System.String
      description: The name.
    return:
      type: Harmony.Traverse
      description: The new with type.
    content.vb: Public Shared Function CreateWithType(name As String) As Traverse
  overload: Harmony.Traverse.CreateWithType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Harmony.Traverse.#ctor(System.Type)
  commentId: M:Harmony.Traverse.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: Traverse(Type)
  nameWithType: Traverse.Traverse(Type)
  fullName: Harmony.Traverse.Traverse(System.Type)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 3133
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Constructor.
  example: []
  syntax:
    content: public Traverse(Type type)
    parameters:
    - id: type
      type: System.Type
      description: The type.
    content.vb: Public Sub New(type As Type)
  overload: Harmony.Traverse.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.Traverse.#ctor(System.Object)
  commentId: M:Harmony.Traverse.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: Traverse(Object)
  nameWithType: Traverse.Traverse(Object)
  fullName: Harmony.Traverse.Traverse(System.Object)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 3141
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Constructor.
  example: []
  syntax:
    content: public Traverse(object root)
    parameters:
    - id: root
      type: System.Object
      description: The root.
    content.vb: Public Sub New(root As Object)
  overload: Harmony.Traverse.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.Traverse.GetValue
  commentId: M:Harmony.Traverse.GetValue
  id: GetValue
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: GetValue()
  nameWithType: Traverse.GetValue()
  fullName: Harmony.Traverse.GetValue()
  type: Method
  source:
    id: GetValue
    path: ''
    startLine: 3166
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Gets a value.
  example: []
  syntax:
    content: public object GetValue()
    return:
      type: System.Object
      description: The value.
    content.vb: Public Function GetValue As Object
  overload: Harmony.Traverse.GetValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.Traverse.GetValue``1
  commentId: M:Harmony.Traverse.GetValue``1
  id: GetValue``1
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: GetValue<T>()
  nameWithType: Traverse.GetValue<T>()
  fullName: Harmony.Traverse.GetValue<T>()
  type: Method
  source:
    id: GetValue
    path: ''
    startLine: 3182
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Gets a value.
  example: []
  syntax:
    content: public T GetValue<T>()
    typeParameters:
    - id: T
      description: Generic type parameter.
    return:
      type: '{T}'
      description: The value.
    content.vb: Public Function GetValue(Of T) As T
  overload: Harmony.Traverse.GetValue*
  nameWithType.vb: Traverse.GetValue(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Harmony.Traverse.GetValue(Of T)()
  name.vb: GetValue(Of T)()
- uid: Harmony.Traverse.GetValue(System.Object[])
  commentId: M:Harmony.Traverse.GetValue(System.Object[])
  id: GetValue(System.Object[])
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: GetValue(Object[])
  nameWithType: Traverse.GetValue(Object[])
  fullName: Harmony.Traverse.GetValue(System.Object[])
  type: Method
  source:
    id: GetValue
    path: ''
    startLine: 3194
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Gets a value.
  example: []
  syntax:
    content: public object GetValue(params object[] arguments)
    parameters:
    - id: arguments
      type: System.Object[]
      description: The arguments.
    return:
      type: System.Object
      description: The value.
    content.vb: Public Function GetValue(ParamArray arguments As Object()) As Object
  overload: Harmony.Traverse.GetValue*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: Thrown when an exception error condition occurs.
  nameWithType.vb: Traverse.GetValue(Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Harmony.Traverse.GetValue(System.Object())
  name.vb: GetValue(Object())
- uid: Harmony.Traverse.GetValue``1(System.Object[])
  commentId: M:Harmony.Traverse.GetValue``1(System.Object[])
  id: GetValue``1(System.Object[])
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: GetValue<T>(Object[])
  nameWithType: Traverse.GetValue<T>(Object[])
  fullName: Harmony.Traverse.GetValue<T>(System.Object[])
  type: Method
  source:
    id: GetValue
    path: ''
    startLine: 3207
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Gets a value.
  example: []
  syntax:
    content: public T GetValue<T>(params object[] arguments)
    parameters:
    - id: arguments
      type: System.Object[]
      description: The arguments.
    typeParameters:
    - id: T
      description: Generic type parameter.
    return:
      type: '{T}'
      description: The value.
    content.vb: Public Function GetValue(Of T)(ParamArray arguments As Object()) As T
  overload: Harmony.Traverse.GetValue*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: Thrown when an exception error condition occurs.
  nameWithType.vb: Traverse.GetValue(Of T)(Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Harmony.Traverse.GetValue(Of T)(System.Object())
  name.vb: GetValue(Of T)(Object())
- uid: Harmony.Traverse.SetValue(System.Object)
  commentId: M:Harmony.Traverse.SetValue(System.Object)
  id: SetValue(System.Object)
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: SetValue(Object)
  nameWithType: Traverse.SetValue(Object)
  fullName: Harmony.Traverse.SetValue(System.Object)
  type: Method
  source:
    id: SetValue
    path: ''
    startLine: 3219
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Sets a value.
  example: []
  syntax:
    content: public Traverse SetValue(object value)
    parameters:
    - id: value
      type: System.Object
      description: The value.
    return:
      type: Harmony.Traverse
      description: A Traverse.
    content.vb: Public Function SetValue(value As Object) As Traverse
  overload: Harmony.Traverse.SetValue*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: Thrown when an exception error condition occurs.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.Traverse.GetValueType
  commentId: M:Harmony.Traverse.GetValueType
  id: GetValueType
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: GetValueType()
  nameWithType: Traverse.GetValueType()
  fullName: Harmony.Traverse.GetValueType()
  type: Method
  source:
    id: GetValueType
    path: ''
    startLine: 3233
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Gets value type.
  example: []
  syntax:
    content: public Type GetValueType()
    return:
      type: System.Type
      description: The value type.
    content.vb: Public Function GetValueType As Type
  overload: Harmony.Traverse.GetValueType*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.Traverse.Type(System.String)
  commentId: M:Harmony.Traverse.Type(System.String)
  id: Type(System.String)
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: Type(String)
  nameWithType: Traverse.Type(String)
  fullName: Harmony.Traverse.Type(System.String)
  type: Method
  source:
    id: Type
    path: ''
    startLine: 3253
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Types.
  example: []
  syntax:
    content: public Traverse Type(string name)
    parameters:
    - id: name
      type: System.String
      description: The name.
    return:
      type: Harmony.Traverse
      description: A Traverse.
    content.vb: Public Function Type(name As String) As Traverse
  overload: Harmony.Traverse.Type*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when one or more required arguments are null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.Traverse.Field(System.String)
  commentId: M:Harmony.Traverse.Field(System.String)
  id: Field(System.String)
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: Field(String)
  nameWithType: Traverse.Field(String)
  fullName: Harmony.Traverse.Field(System.String)
  type: Method
  source:
    id: Field
    path: ''
    startLine: 3267
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Fields.
  example: []
  syntax:
    content: public Traverse Field(string name)
    parameters:
    - id: name
      type: System.String
      description: The name.
    return:
      type: Harmony.Traverse
      description: A Traverse&lt;T>
    content.vb: Public Function Field(name As String) As Traverse
  overload: Harmony.Traverse.Field*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when one or more required arguments are null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.Traverse.Field``1(System.String)
  commentId: M:Harmony.Traverse.Field``1(System.String)
  id: Field``1(System.String)
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: Field<T>(String)
  nameWithType: Traverse.Field<T>(String)
  fullName: Harmony.Traverse.Field<T>(System.String)
  type: Method
  source:
    id: Field
    path: ''
    startLine: 3283
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Fields.
  example: []
  syntax:
    content: public Traverse<T> Field<T>(string name)
    parameters:
    - id: name
      type: System.String
      description: The name.
    typeParameters:
    - id: T
      description: Generic type parameter.
    return:
      type: Harmony.Traverse{{T}}
      description: A Traverse&lt;T>
    content.vb: Public Function Field(Of T)(name As String) As Traverse(Of T)
  overload: Harmony.Traverse.Field*
  nameWithType.vb: Traverse.Field(Of T)(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Harmony.Traverse.Field(Of T)(System.String)
  name.vb: Field(Of T)(String)
- uid: Harmony.Traverse.Fields
  commentId: M:Harmony.Traverse.Fields
  id: Fields
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: Fields()
  nameWithType: Traverse.Fields()
  fullName: Harmony.Traverse.Fields()
  type: Method
  source:
    id: Fields
    path: ''
    startLine: 3291
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Gets the fields.
  example: []
  syntax:
    content: public List<string> Fields()
    return:
      type: System.Collections.Generic.List{System.String}
      description: A List&lt;string>
    content.vb: Public Function Fields As List(Of String)
  overload: Harmony.Traverse.Fields*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.Traverse.Property(System.String,System.Object[])
  commentId: M:Harmony.Traverse.Property(System.String,System.Object[])
  id: Property(System.String,System.Object[])
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: Property(String, Object[])
  nameWithType: Traverse.Property(String, Object[])
  fullName: Harmony.Traverse.Property(System.String, System.Object[])
  type: Method
  source:
    id: Property
    path: ''
    startLine: 3303
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Properties.
  example: []
  syntax:
    content: public Traverse Property(string name, object[] index = null)
    parameters:
    - id: name
      type: System.String
      description: The name.
    - id: index
      type: System.Object[]
      description: (Optional) Zero-based index of the.
    return:
      type: Harmony.Traverse
      description: A Traverse&lt;T>
    content.vb: Public Function Property(name As String, index As Object() = Nothing) As Traverse
  overload: Harmony.Traverse.Property*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when one or more required arguments are null.
  nameWithType.vb: Traverse.Property(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Harmony.Traverse.Property(System.String, System.Object())
  name.vb: Property(String, Object())
- uid: Harmony.Traverse.Property``1(System.String,System.Object[])
  commentId: M:Harmony.Traverse.Property``1(System.String,System.Object[])
  id: Property``1(System.String,System.Object[])
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: Property<T>(String, Object[])
  nameWithType: Traverse.Property<T>(String, Object[])
  fullName: Harmony.Traverse.Property<T>(System.String, System.Object[])
  type: Method
  source:
    id: Property
    path: ''
    startLine: 3319
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Properties.
  example: []
  syntax:
    content: public Traverse<T> Property<T>(string name, object[] index = null)
    parameters:
    - id: name
      type: System.String
      description: The name.
    - id: index
      type: System.Object[]
      description: (Optional) Zero-based index of the.
    typeParameters:
    - id: T
      description: Generic type parameter.
    return:
      type: Harmony.Traverse{{T}}
      description: A Traverse&lt;T>
    content.vb: Public Function Property(Of T)(name As String, index As Object() = Nothing) As Traverse(Of T)
  overload: Harmony.Traverse.Property*
  nameWithType.vb: Traverse.Property(Of T)(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Harmony.Traverse.Property(Of T)(System.String, System.Object())
  name.vb: Property(Of T)(String, Object())
- uid: Harmony.Traverse.Properties
  commentId: M:Harmony.Traverse.Properties
  id: Properties
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: Properties()
  nameWithType: Traverse.Properties()
  fullName: Harmony.Traverse.Properties()
  type: Method
  source:
    id: Properties
    path: ''
    startLine: 3327
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Gets the properties.
  example: []
  syntax:
    content: public List<string> Properties()
    return:
      type: System.Collections.Generic.List{System.String}
      description: A List&lt;string>
    content.vb: Public Function Properties As List(Of String)
  overload: Harmony.Traverse.Properties*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.Traverse.Method(System.String,System.Object[])
  commentId: M:Harmony.Traverse.Method(System.String,System.Object[])
  id: Method(System.String,System.Object[])
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: Method(String, Object[])
  nameWithType: Traverse.Method(String, Object[])
  fullName: Harmony.Traverse.Method(System.String, System.Object[])
  type: Method
  source:
    id: Method
    path: ''
    startLine: 3339
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Methods.
  example: []
  syntax:
    content: public Traverse Method(string name, params object[] arguments)
    parameters:
    - id: name
      type: System.String
      description: The name.
    - id: arguments
      type: System.Object[]
      description: The arguments.
    return:
      type: Harmony.Traverse
      description: A Traverse.
    content.vb: Public Function Method(name As String, ParamArray arguments As Object()) As Traverse
  overload: Harmony.Traverse.Method*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when one or more required arguments are null.
  nameWithType.vb: Traverse.Method(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Harmony.Traverse.Method(System.String, System.Object())
  name.vb: Method(String, Object())
- uid: Harmony.Traverse.Method(System.String,System.Type[],System.Object[])
  commentId: M:Harmony.Traverse.Method(System.String,System.Type[],System.Object[])
  id: Method(System.String,System.Type[],System.Object[])
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: Method(String, Type[], Object[])
  nameWithType: Traverse.Method(String, Type[], Object[])
  fullName: Harmony.Traverse.Method(System.String, System.Type[], System.Object[])
  type: Method
  source:
    id: Method
    path: ''
    startLine: 3357
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Methods.
  example: []
  syntax:
    content: public Traverse Method(string name, Type[] paramTypes, object[] arguments = null)
    parameters:
    - id: name
      type: System.String
      description: The name.
    - id: paramTypes
      type: System.Type[]
      description: List of types of the parameters.
    - id: arguments
      type: System.Object[]
      description: (Optional) The arguments.
    return:
      type: Harmony.Traverse
      description: A Traverse.
    content.vb: Public Function Method(name As String, paramTypes As Type(), arguments As Object() = Nothing) As Traverse
  overload: Harmony.Traverse.Method*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when one or more required arguments are null.
  nameWithType.vb: Traverse.Method(String, Type(), Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Harmony.Traverse.Method(System.String, System.Type(), System.Object())
  name.vb: Method(String, Type(), Object())
- uid: Harmony.Traverse.Methods
  commentId: M:Harmony.Traverse.Methods
  id: Methods
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: Methods()
  nameWithType: Traverse.Methods()
  fullName: Harmony.Traverse.Methods()
  type: Method
  source:
    id: Methods
    path: ''
    startLine: 3370
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Gets the methods.
  example: []
  syntax:
    content: public List<string> Methods()
    return:
      type: System.Collections.Generic.List{System.String}
      description: A List&lt;string>
    content.vb: Public Function Methods As List(Of String)
  overload: Harmony.Traverse.Methods*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.Traverse.FieldExists
  commentId: M:Harmony.Traverse.FieldExists
  id: FieldExists
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: FieldExists()
  nameWithType: Traverse.FieldExists()
  fullName: Harmony.Traverse.FieldExists()
  type: Method
  source:
    id: FieldExists
    path: ''
    startLine: 3379
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Queries if a given field exists.
  example: []
  syntax:
    content: public bool FieldExists()
    return:
      type: System.Boolean
      description: True if it succeeds, false if it fails.
    content.vb: Public Function FieldExists As Boolean
  overload: Harmony.Traverse.FieldExists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.Traverse.MethodExists
  commentId: M:Harmony.Traverse.MethodExists
  id: MethodExists
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: MethodExists()
  nameWithType: Traverse.MethodExists()
  fullName: Harmony.Traverse.MethodExists()
  type: Method
  source:
    id: MethodExists
    path: ''
    startLine: 3387
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Queries if a given method exists.
  example: []
  syntax:
    content: public bool MethodExists()
    return:
      type: System.Boolean
      description: True if it succeeds, false if it fails.
    content.vb: Public Function MethodExists As Boolean
  overload: Harmony.Traverse.MethodExists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.Traverse.TypeExists
  commentId: M:Harmony.Traverse.TypeExists
  id: TypeExists
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: TypeExists()
  nameWithType: Traverse.TypeExists()
  fullName: Harmony.Traverse.TypeExists()
  type: Method
  source:
    id: TypeExists
    path: ''
    startLine: 3395
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Queries if a given type exists.
  example: []
  syntax:
    content: public bool TypeExists()
    return:
      type: System.Boolean
      description: True if it succeeds, false if it fails.
    content.vb: Public Function TypeExists As Boolean
  overload: Harmony.Traverse.TypeExists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Harmony.Traverse.IterateFields(System.Object,System.Action{Harmony.Traverse})
  commentId: M:Harmony.Traverse.IterateFields(System.Object,System.Action{Harmony.Traverse})
  id: IterateFields(System.Object,System.Action{Harmony.Traverse})
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: IterateFields(Object, Action<Traverse>)
  nameWithType: Traverse.IterateFields(Object, Action<Traverse>)
  fullName: Harmony.Traverse.IterateFields(System.Object, System.Action<Harmony.Traverse>)
  type: Method
  source:
    id: IterateFields
    path: ''
    startLine: 3404
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Iterate fields.
  example: []
  syntax:
    content: public static void IterateFields(object source, Action<Traverse> action)
    parameters:
    - id: source
      type: System.Object
      description: Source for the.
    - id: action
      type: System.Action{Harmony.Traverse}
      description: The action.
    content.vb: Public Shared Sub IterateFields(source As Object, action As Action(Of Traverse))
  overload: Harmony.Traverse.IterateFields*
  nameWithType.vb: Traverse.IterateFields(Object, Action(Of Traverse))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Harmony.Traverse.IterateFields(System.Object, System.Action(Of Harmony.Traverse))
  name.vb: IterateFields(Object, Action(Of Traverse))
- uid: Harmony.Traverse.IterateFields(System.Object,System.Object,System.Action{Harmony.Traverse,Harmony.Traverse})
  commentId: M:Harmony.Traverse.IterateFields(System.Object,System.Object,System.Action{Harmony.Traverse,Harmony.Traverse})
  id: IterateFields(System.Object,System.Object,System.Action{Harmony.Traverse,Harmony.Traverse})
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: IterateFields(Object, Object, Action<Traverse, Traverse>)
  nameWithType: Traverse.IterateFields(Object, Object, Action<Traverse, Traverse>)
  fullName: Harmony.Traverse.IterateFields(System.Object, System.Object, System.Action<Harmony.Traverse, Harmony.Traverse>)
  type: Method
  source:
    id: IterateFields
    path: ''
    startLine: 3415
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Iterate fields.
  example: []
  syntax:
    content: public static void IterateFields(object source, object target, Action<Traverse, Traverse> action)
    parameters:
    - id: source
      type: System.Object
      description: Source for the.
    - id: target
      type: System.Object
      description: Target for the.
    - id: action
      type: System.Action{Harmony.Traverse,Harmony.Traverse}
      description: The action.
    content.vb: Public Shared Sub IterateFields(source As Object, target As Object, action As Action(Of Traverse, Traverse))
  overload: Harmony.Traverse.IterateFields*
  nameWithType.vb: Traverse.IterateFields(Object, Object, Action(Of Traverse, Traverse))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Harmony.Traverse.IterateFields(System.Object, System.Object, System.Action(Of Harmony.Traverse, Harmony.Traverse))
  name.vb: IterateFields(Object, Object, Action(Of Traverse, Traverse))
- uid: Harmony.Traverse.IterateFields(System.Object,System.Object,System.Action{System.String,Harmony.Traverse,Harmony.Traverse})
  commentId: M:Harmony.Traverse.IterateFields(System.Object,System.Object,System.Action{System.String,Harmony.Traverse,Harmony.Traverse})
  id: IterateFields(System.Object,System.Object,System.Action{System.String,Harmony.Traverse,Harmony.Traverse})
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: IterateFields(Object, Object, Action<String, Traverse, Traverse>)
  nameWithType: Traverse.IterateFields(Object, Object, Action<String, Traverse, Traverse>)
  fullName: Harmony.Traverse.IterateFields(System.Object, System.Object, System.Action<System.String, Harmony.Traverse, Harmony.Traverse>)
  type: Method
  source:
    id: IterateFields
    path: ''
    startLine: 3427
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Iterate fields.
  example: []
  syntax:
    content: public static void IterateFields(object source, object target, Action<string, Traverse, Traverse> action)
    parameters:
    - id: source
      type: System.Object
      description: Source for the.
    - id: target
      type: System.Object
      description: Target for the.
    - id: action
      type: System.Action{System.String,Harmony.Traverse,Harmony.Traverse}
      description: The action.
    content.vb: Public Shared Sub IterateFields(source As Object, target As Object, action As Action(Of String, Traverse, Traverse))
  overload: Harmony.Traverse.IterateFields*
  nameWithType.vb: Traverse.IterateFields(Object, Object, Action(Of String, Traverse, Traverse))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Harmony.Traverse.IterateFields(System.Object, System.Object, System.Action(Of System.String, Harmony.Traverse, Harmony.Traverse))
  name.vb: IterateFields(Object, Object, Action(Of String, Traverse, Traverse))
- uid: Harmony.Traverse.IterateProperties(System.Object,System.Action{Harmony.Traverse})
  commentId: M:Harmony.Traverse.IterateProperties(System.Object,System.Action{Harmony.Traverse})
  id: IterateProperties(System.Object,System.Action{Harmony.Traverse})
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: IterateProperties(Object, Action<Traverse>)
  nameWithType: Traverse.IterateProperties(Object, Action<Traverse>)
  fullName: Harmony.Traverse.IterateProperties(System.Object, System.Action<Harmony.Traverse>)
  type: Method
  source:
    id: IterateProperties
    path: ''
    startLine: 3438
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Iterate properties.
  example: []
  syntax:
    content: public static void IterateProperties(object source, Action<Traverse> action)
    parameters:
    - id: source
      type: System.Object
      description: Source for the.
    - id: action
      type: System.Action{Harmony.Traverse}
      description: The action.
    content.vb: Public Shared Sub IterateProperties(source As Object, action As Action(Of Traverse))
  overload: Harmony.Traverse.IterateProperties*
  nameWithType.vb: Traverse.IterateProperties(Object, Action(Of Traverse))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Harmony.Traverse.IterateProperties(System.Object, System.Action(Of Harmony.Traverse))
  name.vb: IterateProperties(Object, Action(Of Traverse))
- uid: Harmony.Traverse.IterateProperties(System.Object,System.Object,System.Action{Harmony.Traverse,Harmony.Traverse})
  commentId: M:Harmony.Traverse.IterateProperties(System.Object,System.Object,System.Action{Harmony.Traverse,Harmony.Traverse})
  id: IterateProperties(System.Object,System.Object,System.Action{Harmony.Traverse,Harmony.Traverse})
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: IterateProperties(Object, Object, Action<Traverse, Traverse>)
  nameWithType: Traverse.IterateProperties(Object, Object, Action<Traverse, Traverse>)
  fullName: Harmony.Traverse.IterateProperties(System.Object, System.Object, System.Action<Harmony.Traverse, Harmony.Traverse>)
  type: Method
  source:
    id: IterateProperties
    path: ''
    startLine: 3449
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Iterate properties.
  example: []
  syntax:
    content: public static void IterateProperties(object source, object target, Action<Traverse, Traverse> action)
    parameters:
    - id: source
      type: System.Object
      description: Source for the.
    - id: target
      type: System.Object
      description: Target for the.
    - id: action
      type: System.Action{Harmony.Traverse,Harmony.Traverse}
      description: The action.
    content.vb: Public Shared Sub IterateProperties(source As Object, target As Object, action As Action(Of Traverse, Traverse))
  overload: Harmony.Traverse.IterateProperties*
  nameWithType.vb: Traverse.IterateProperties(Object, Object, Action(Of Traverse, Traverse))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Harmony.Traverse.IterateProperties(System.Object, System.Object, System.Action(Of Harmony.Traverse, Harmony.Traverse))
  name.vb: IterateProperties(Object, Object, Action(Of Traverse, Traverse))
- uid: Harmony.Traverse.IterateProperties(System.Object,System.Object,System.Action{System.String,Harmony.Traverse,Harmony.Traverse})
  commentId: M:Harmony.Traverse.IterateProperties(System.Object,System.Object,System.Action{System.String,Harmony.Traverse,Harmony.Traverse})
  id: IterateProperties(System.Object,System.Object,System.Action{System.String,Harmony.Traverse,Harmony.Traverse})
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: IterateProperties(Object, Object, Action<String, Traverse, Traverse>)
  nameWithType: Traverse.IterateProperties(Object, Object, Action<String, Traverse, Traverse>)
  fullName: Harmony.Traverse.IterateProperties(System.Object, System.Object, System.Action<System.String, Harmony.Traverse, Harmony.Traverse>)
  type: Method
  source:
    id: IterateProperties
    path: ''
    startLine: 3461
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Iterate properties.
  example: []
  syntax:
    content: public static void IterateProperties(object source, object target, Action<string, Traverse, Traverse> action)
    parameters:
    - id: source
      type: System.Object
      description: Source for the.
    - id: target
      type: System.Object
      description: Target for the.
    - id: action
      type: System.Action{System.String,Harmony.Traverse,Harmony.Traverse}
      description: The action.
    content.vb: Public Shared Sub IterateProperties(source As Object, target As Object, action As Action(Of String, Traverse, Traverse))
  overload: Harmony.Traverse.IterateProperties*
  nameWithType.vb: Traverse.IterateProperties(Object, Object, Action(Of String, Traverse, Traverse))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Harmony.Traverse.IterateProperties(System.Object, System.Object, System.Action(Of System.String, Harmony.Traverse, Harmony.Traverse))
  name.vb: IterateProperties(Object, Object, Action(Of String, Traverse, Traverse))
- uid: Harmony.Traverse.CopyFields
  commentId: F:Harmony.Traverse.CopyFields
  id: CopyFields
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: CopyFields
  nameWithType: Traverse.CopyFields
  fullName: Harmony.Traverse.CopyFields
  type: Field
  source:
    id: CopyFields
    path: ''
    startLine: 3469
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: The copy fields.
  example: []
  syntax:
    content: public static Action<Traverse, Traverse> CopyFields
    return:
      type: System.Action{Harmony.Traverse,Harmony.Traverse}
    content.vb: Public Shared CopyFields As Action(Of Traverse, Traverse)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Harmony.Traverse.ToString
  commentId: M:Harmony.Traverse.ToString
  id: ToString
  parent: Harmony.Traverse
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Traverse.ToString()
  fullName: Harmony.Traverse.ToString()
  type: Method
  source:
    id: ToString
    path: ''
    startLine: 3474
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Returns a string that represents the current object.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string that represents the current object.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Harmony.Traverse.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Harmony
  commentId: N:Harmony
  name: Harmony
  nameWithType: Harmony
  fullName: Harmony
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Harmony.Traverse.Create*
  commentId: Overload:Harmony.Traverse.Create
  name: Create
  nameWithType: Traverse.Create
  fullName: Harmony.Traverse.Create
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Harmony.Traverse
  commentId: T:Harmony.Traverse
  parent: Harmony
  name: Traverse
  nameWithType: Traverse
  fullName: Harmony.Traverse
- uid: Harmony.Traverse.CreateWithType*
  commentId: Overload:Harmony.Traverse.CreateWithType
  name: CreateWithType
  nameWithType: Traverse.CreateWithType
  fullName: Harmony.Traverse.CreateWithType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Harmony.Traverse.#ctor*
  commentId: Overload:Harmony.Traverse.#ctor
  name: Traverse
  nameWithType: Traverse.Traverse
  fullName: Harmony.Traverse.Traverse
- uid: Harmony.Traverse.GetValue*
  commentId: Overload:Harmony.Traverse.GetValue
  name: GetValue
  nameWithType: Traverse.GetValue
  fullName: Harmony.Traverse.GetValue
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Exception
  commentId: T:System.Exception
  isExternal: true
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Harmony.Traverse.SetValue*
  commentId: Overload:Harmony.Traverse.SetValue
  name: SetValue
  nameWithType: Traverse.SetValue
  fullName: Harmony.Traverse.SetValue
- uid: Harmony.Traverse.GetValueType*
  commentId: Overload:Harmony.Traverse.GetValueType
  name: GetValueType
  nameWithType: Traverse.GetValueType
  fullName: Harmony.Traverse.GetValueType
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: Harmony.Traverse.Type*
  commentId: Overload:Harmony.Traverse.Type
  name: Type
  nameWithType: Traverse.Type
  fullName: Harmony.Traverse.Type
- uid: Harmony.Traverse.Field*
  commentId: Overload:Harmony.Traverse.Field
  name: Field
  nameWithType: Traverse.Field
  fullName: Harmony.Traverse.Field
- uid: Harmony.Traverse{{T}}
  commentId: T:Harmony.Traverse{``0}
  parent: Harmony
  definition: Harmony.Traverse`1
  name: Traverse<T>
  nameWithType: Traverse<T>
  fullName: Harmony.Traverse<T>
  nameWithType.vb: Traverse(Of T)
  fullName.vb: Harmony.Traverse(Of T)
  name.vb: Traverse(Of T)
  spec.csharp:
  - uid: Harmony.Traverse`1
    name: Traverse
    nameWithType: Traverse
    fullName: Harmony.Traverse
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Harmony.Traverse`1
    name: Traverse
    nameWithType: Traverse
    fullName: Harmony.Traverse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Harmony.Traverse`1
  commentId: T:Harmony.Traverse`1
  name: Traverse<T>
  nameWithType: Traverse<T>
  fullName: Harmony.Traverse<T>
  nameWithType.vb: Traverse(Of T)
  fullName.vb: Harmony.Traverse(Of T)
  name.vb: Traverse(Of T)
  spec.csharp:
  - uid: Harmony.Traverse`1
    name: Traverse
    nameWithType: Traverse
    fullName: Harmony.Traverse
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Harmony.Traverse`1
    name: Traverse
    nameWithType: Traverse
    fullName: Harmony.Traverse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Harmony.Traverse.Fields*
  commentId: Overload:Harmony.Traverse.Fields
  name: Fields
  nameWithType: Traverse.Fields
  fullName: Harmony.Traverse.Fields
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Harmony.Traverse.Property*
  commentId: Overload:Harmony.Traverse.Property
  name: Property
  nameWithType: Traverse.Property
  fullName: Harmony.Traverse.Property
- uid: Harmony.Traverse.Properties*
  commentId: Overload:Harmony.Traverse.Properties
  name: Properties
  nameWithType: Traverse.Properties
  fullName: Harmony.Traverse.Properties
- uid: Harmony.Traverse.Method*
  commentId: Overload:Harmony.Traverse.Method
  name: Method
  nameWithType: Traverse.Method
  fullName: Harmony.Traverse.Method
- uid: System.Type[]
  isExternal: true
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Harmony.Traverse.Methods*
  commentId: Overload:Harmony.Traverse.Methods
  name: Methods
  nameWithType: Traverse.Methods
  fullName: Harmony.Traverse.Methods
- uid: Harmony.Traverse.FieldExists*
  commentId: Overload:Harmony.Traverse.FieldExists
  name: FieldExists
  nameWithType: Traverse.FieldExists
  fullName: Harmony.Traverse.FieldExists
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Harmony.Traverse.MethodExists*
  commentId: Overload:Harmony.Traverse.MethodExists
  name: MethodExists
  nameWithType: Traverse.MethodExists
  fullName: Harmony.Traverse.MethodExists
- uid: Harmony.Traverse.TypeExists*
  commentId: Overload:Harmony.Traverse.TypeExists
  name: TypeExists
  nameWithType: Traverse.TypeExists
  fullName: Harmony.Traverse.TypeExists
- uid: Harmony.Traverse.IterateFields*
  commentId: Overload:Harmony.Traverse.IterateFields
  name: IterateFields
  nameWithType: Traverse.IterateFields
  fullName: Harmony.Traverse.IterateFields
- uid: System.Action{Harmony.Traverse}
  commentId: T:System.Action{Harmony.Traverse}
  parent: System
  definition: System.Action`1
  name: Action<Traverse>
  nameWithType: Action<Traverse>
  fullName: System.Action<Harmony.Traverse>
  nameWithType.vb: Action(Of Traverse)
  fullName.vb: System.Action(Of Harmony.Traverse)
  name.vb: Action(Of Traverse)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Harmony.Traverse
    name: Traverse
    nameWithType: Traverse
    fullName: Harmony.Traverse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Harmony.Traverse
    name: Traverse
    nameWithType: Traverse
    fullName: Harmony.Traverse
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{Harmony.Traverse,Harmony.Traverse}
  commentId: T:System.Action{Harmony.Traverse,Harmony.Traverse}
  parent: System
  definition: System.Action`2
  name: Action<Traverse, Traverse>
  nameWithType: Action<Traverse, Traverse>
  fullName: System.Action<Harmony.Traverse, Harmony.Traverse>
  nameWithType.vb: Action(Of Traverse, Traverse)
  fullName.vb: System.Action(Of Harmony.Traverse, Harmony.Traverse)
  name.vb: Action(Of Traverse, Traverse)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Harmony.Traverse
    name: Traverse
    nameWithType: Traverse
    fullName: Harmony.Traverse
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Harmony.Traverse
    name: Traverse
    nameWithType: Traverse
    fullName: Harmony.Traverse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Harmony.Traverse
    name: Traverse
    nameWithType: Traverse
    fullName: Harmony.Traverse
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Harmony.Traverse
    name: Traverse
    nameWithType: Traverse
    fullName: Harmony.Traverse
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.String,Harmony.Traverse,Harmony.Traverse}
  commentId: T:System.Action{System.String,Harmony.Traverse,Harmony.Traverse}
  parent: System
  definition: System.Action`3
  name: Action<String, Traverse, Traverse>
  nameWithType: Action<String, Traverse, Traverse>
  fullName: System.Action<System.String, Harmony.Traverse, Harmony.Traverse>
  nameWithType.vb: Action(Of String, Traverse, Traverse)
  fullName.vb: System.Action(Of System.String, Harmony.Traverse, Harmony.Traverse)
  name.vb: Action(Of String, Traverse, Traverse)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Harmony.Traverse
    name: Traverse
    nameWithType: Traverse
    fullName: Harmony.Traverse
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Harmony.Traverse
    name: Traverse
    nameWithType: Traverse
    fullName: Harmony.Traverse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Harmony.Traverse
    name: Traverse
    nameWithType: Traverse
    fullName: Harmony.Traverse
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Harmony.Traverse
    name: Traverse
    nameWithType: Traverse
    fullName: Harmony.Traverse
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`3
  commentId: T:System.Action`3
  isExternal: true
  name: Action<T1, T2, T3>
  nameWithType: Action<T1, T2, T3>
  fullName: System.Action<T1, T2, T3>
  nameWithType.vb: Action(Of T1, T2, T3)
  fullName.vb: System.Action(Of T1, T2, T3)
  name.vb: Action(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: Harmony.Traverse.IterateProperties*
  commentId: Overload:Harmony.Traverse.IterateProperties
  name: IterateProperties
  nameWithType: Traverse.IterateProperties
  fullName: Harmony.Traverse.IterateProperties
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Harmony.Traverse.ToString*
  commentId: Overload:Harmony.Traverse.ToString
  name: ToString
  nameWithType: Traverse.ToString
  fullName: Harmony.Traverse.ToString
