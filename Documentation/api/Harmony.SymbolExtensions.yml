### YamlMime:ManagedReference
items:
- uid: Harmony.SymbolExtensions
  commentId: T:Harmony.SymbolExtensions
  id: SymbolExtensions
  parent: Harmony
  children:
  - Harmony.SymbolExtensions.GetMethodInfo(Expression{System.Action})
  - Harmony.SymbolExtensions.GetMethodInfo(LambdaExpression)
  - Harmony.SymbolExtensions.GetMethodInfo``1(Expression{System.Action{``0}})
  - Harmony.SymbolExtensions.GetMethodInfo``2(Expression{System.Func{``0,``1}})
  langs:
  - csharp
  - vb
  name: SymbolExtensions
  nameWithType: SymbolExtensions
  fullName: Harmony.SymbolExtensions
  type: Class
  source:
    id: SymbolExtensions
    path: ''
    startLine: 2976
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: A symbol extensions.
  example: []
  syntax:
    content: public static class SymbolExtensions
    content.vb: Public Module SymbolExtensions
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Harmony.SymbolExtensions.GetMethodInfo(Expression{System.Action})
  commentId: M:Harmony.SymbolExtensions.GetMethodInfo(Expression{System.Action})
  id: GetMethodInfo(Expression{System.Action})
  parent: Harmony.SymbolExtensions
  langs:
  - csharp
  - vb
  name: GetMethodInfo(Expression<Action>)
  nameWithType: SymbolExtensions.GetMethodInfo(Expression<Action>)
  fullName: Harmony.SymbolExtensions.GetMethodInfo(Expression<System.Action>)
  type: Method
  source:
    id: GetMethodInfo
    path: ''
    startLine: 2984
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Given a lambda expression that calls a method, returns the method info.
  example: []
  syntax:
    content: public static MethodInfo GetMethodInfo(Expression<Action> expression)
    parameters:
    - id: expression
      type: Expression{System.Action}
      description: The expression.
    return:
      type: MethodInfo
      description: The method information.
    content.vb: Public Shared Function GetMethodInfo(expression As Expression(Of Action)) As MethodInfo
  overload: Harmony.SymbolExtensions.GetMethodInfo*
  nameWithType.vb: SymbolExtensions.GetMethodInfo(Expression(Of Action))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Harmony.SymbolExtensions.GetMethodInfo(Expression(Of System.Action))
  name.vb: GetMethodInfo(Expression(Of Action))
- uid: Harmony.SymbolExtensions.GetMethodInfo``1(Expression{System.Action{``0}})
  commentId: M:Harmony.SymbolExtensions.GetMethodInfo``1(Expression{System.Action{``0}})
  id: GetMethodInfo``1(Expression{System.Action{``0}})
  parent: Harmony.SymbolExtensions
  langs:
  - csharp
  - vb
  name: GetMethodInfo<T>(Expression<Action<T>>)
  nameWithType: SymbolExtensions.GetMethodInfo<T>(Expression<Action<T>>)
  fullName: Harmony.SymbolExtensions.GetMethodInfo<T>(Expression<System.Action<T>>)
  type: Method
  source:
    id: GetMethodInfo
    path: ''
    startLine: 2994
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Given a lambda expression that calls a method, returns the method info.
  example: []
  syntax:
    content: public static MethodInfo GetMethodInfo<T>(Expression<Action<T>> expression)
    parameters:
    - id: expression
      type: Expression{System.Action{{T}}}
      description: The expression.
    typeParameters:
    - id: T
      description: .
    return:
      type: MethodInfo
      description: The method information.
    content.vb: Public Shared Function GetMethodInfo(Of T)(expression As Expression(Of Action(Of T))) As MethodInfo
  overload: Harmony.SymbolExtensions.GetMethodInfo*
  nameWithType.vb: SymbolExtensions.GetMethodInfo(Of T)(Expression(Of Action(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Harmony.SymbolExtensions.GetMethodInfo(Of T)(Expression(Of System.Action(Of T)))
  name.vb: GetMethodInfo(Of T)(Expression(Of Action(Of T)))
- uid: Harmony.SymbolExtensions.GetMethodInfo``2(Expression{System.Func{``0,``1}})
  commentId: M:Harmony.SymbolExtensions.GetMethodInfo``2(Expression{System.Func{``0,``1}})
  id: GetMethodInfo``2(Expression{System.Func{``0,``1}})
  parent: Harmony.SymbolExtensions
  langs:
  - csharp
  - vb
  name: GetMethodInfo<T, TResult>(Expression<Func<T, TResult>>)
  nameWithType: SymbolExtensions.GetMethodInfo<T, TResult>(Expression<Func<T, TResult>>)
  fullName: Harmony.SymbolExtensions.GetMethodInfo<T, TResult>(Expression<System.Func<T, TResult>>)
  type: Method
  source:
    id: GetMethodInfo
    path: ''
    startLine: 3005
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Given a lambda expression that calls a method, returns the method info.
  example: []
  syntax:
    content: public static MethodInfo GetMethodInfo<T, TResult>(Expression<Func<T, TResult>> expression)
    parameters:
    - id: expression
      type: Expression{System.Func{{T},{TResult}}}
      description: The expression.
    typeParameters:
    - id: T
      description: .
    - id: TResult
      description: Type of the result.
    return:
      type: MethodInfo
      description: The method information.
    content.vb: Public Shared Function GetMethodInfo(Of T, TResult)(expression As Expression(Of Func(Of T, TResult))) As MethodInfo
  overload: Harmony.SymbolExtensions.GetMethodInfo*
  nameWithType.vb: SymbolExtensions.GetMethodInfo(Of T, TResult)(Expression(Of Func(Of T, TResult)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Harmony.SymbolExtensions.GetMethodInfo(Of T, TResult)(Expression(Of System.Func(Of T, TResult)))
  name.vb: GetMethodInfo(Of T, TResult)(Expression(Of Func(Of T, TResult)))
- uid: Harmony.SymbolExtensions.GetMethodInfo(LambdaExpression)
  commentId: M:Harmony.SymbolExtensions.GetMethodInfo(LambdaExpression)
  id: GetMethodInfo(LambdaExpression)
  parent: Harmony.SymbolExtensions
  langs:
  - csharp
  - vb
  name: GetMethodInfo(LambdaExpression)
  nameWithType: SymbolExtensions.GetMethodInfo(LambdaExpression)
  fullName: Harmony.SymbolExtensions.GetMethodInfo(LambdaExpression)
  type: Method
  source:
    id: GetMethodInfo
    path: ''
    startLine: 3016
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Given a lambda expression that calls a method, returns the method info.
  example: []
  syntax:
    content: public static MethodInfo GetMethodInfo(LambdaExpression expression)
    parameters:
    - id: expression
      type: LambdaExpression
      description: The expression.
    return:
      type: MethodInfo
      description: The method information.
    content.vb: Public Shared Function GetMethodInfo(expression As LambdaExpression) As MethodInfo
  overload: Harmony.SymbolExtensions.GetMethodInfo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when one or more arguments have unsupported or illegal values.
  - type: System.Exception
    commentId: T:System.Exception
    description: Thrown when an exception error condition occurs.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Harmony
  commentId: N:Harmony
  name: Harmony
  nameWithType: Harmony
  fullName: Harmony
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Harmony.SymbolExtensions.GetMethodInfo*
  commentId: Overload:Harmony.SymbolExtensions.GetMethodInfo
  name: GetMethodInfo
  nameWithType: SymbolExtensions.GetMethodInfo
  fullName: Harmony.SymbolExtensions.GetMethodInfo
- uid: Expression{System.Action}
  commentId: '!:Expression{System.Action}'
  definition: Expression`1
  name: Expression<Action>
  nameWithType: Expression<Action>
  fullName: Expression<System.Action>
  nameWithType.vb: Expression(Of Action)
  fullName.vb: Expression(Of System.Action)
  name.vb: Expression(Of Action)
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MethodInfo
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: MethodInfo
- uid: Expression`1
  isExternal: true
  name: Expression<>
  nameWithType: Expression<>
  fullName: Expression<>
  nameWithType.vb: Expression(Of )
  fullName.vb: Expression(Of )
  name.vb: Expression(Of )
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Expression{System.Action{{T}}}
  commentId: '!:Expression{System.Action{``0}}'
  definition: Expression`1
  name: Expression<Action<T>>
  nameWithType: Expression<Action<T>>
  fullName: Expression<System.Action<T>>
  nameWithType.vb: Expression(Of Action(Of T))
  fullName.vb: Expression(Of System.Action(Of T))
  name.vb: Expression(Of Action(Of T))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Expression{System.Func{{T},{TResult}}}
  commentId: '!:Expression{System.Func{``0,``1}}'
  definition: Expression`1
  name: Expression<Func<T, TResult>>
  nameWithType: Expression<Func<T, TResult>>
  fullName: Expression<System.Func<T, TResult>>
  nameWithType.vb: Expression(Of Func(Of T, TResult))
  fullName.vb: Expression(Of System.Func(Of T, TResult))
  name.vb: Expression(Of Func(Of T, TResult))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: System.Exception
  commentId: T:System.Exception
  isExternal: true
- uid: LambdaExpression
  commentId: '!:LambdaExpression'
  isExternal: true
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: LambdaExpression
