### YamlMime:ManagedReference
items:
- uid: Harmony.Patches
  commentId: T:Harmony.Patches
  id: Patches
  parent: Harmony
  children:
  - Harmony.Patches.#ctor(Patch[],Patch[],Patch[])
  - Harmony.Patches.Owners
  - Harmony.Patches.Postfixes
  - Harmony.Patches.Prefixes
  - Harmony.Patches.Transpilers
  langs:
  - csharp
  - vb
  name: Patches
  nameWithType: Patches
  fullName: Harmony.Patches
  type: Class
  source:
    id: Patches
    path: ''
    startLine: 1222
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: A patches.
  example: []
  syntax:
    content: public class Patches
    content.vb: Public Class Patches
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Harmony.Patches.Prefixes
  commentId: F:Harmony.Patches.Prefixes
  id: Prefixes
  parent: Harmony.Patches
  langs:
  - csharp
  - vb
  name: Prefixes
  nameWithType: Patches.Prefixes
  fullName: Harmony.Patches.Prefixes
  type: Field
  source:
    id: Prefixes
    path: ''
    startLine: 1225
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: The prefixes.
  example: []
  syntax:
    content: public readonly ReadOnlyCollection<Patch> Prefixes
    return:
      type: ReadOnlyCollection{Patch}
    content.vb: Public ReadOnly Prefixes As ReadOnlyCollection(Of Patch)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Harmony.Patches.Postfixes
  commentId: F:Harmony.Patches.Postfixes
  id: Postfixes
  parent: Harmony.Patches
  langs:
  - csharp
  - vb
  name: Postfixes
  nameWithType: Patches.Postfixes
  fullName: Harmony.Patches.Postfixes
  type: Field
  source:
    id: Postfixes
    path: ''
    startLine: 1228
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: The postfixes.
  example: []
  syntax:
    content: public readonly ReadOnlyCollection<Patch> Postfixes
    return:
      type: ReadOnlyCollection{Patch}
    content.vb: Public ReadOnly Postfixes As ReadOnlyCollection(Of Patch)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Harmony.Patches.Transpilers
  commentId: F:Harmony.Patches.Transpilers
  id: Transpilers
  parent: Harmony.Patches
  langs:
  - csharp
  - vb
  name: Transpilers
  nameWithType: Patches.Transpilers
  fullName: Harmony.Patches.Transpilers
  type: Field
  source:
    id: Transpilers
    path: ''
    startLine: 1231
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: The transpilers.
  example: []
  syntax:
    content: public readonly ReadOnlyCollection<Patch> Transpilers
    return:
      type: ReadOnlyCollection{Patch}
    content.vb: Public ReadOnly Transpilers As ReadOnlyCollection(Of Patch)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Harmony.Patches.Owners
  commentId: P:Harmony.Patches.Owners
  id: Owners
  parent: Harmony.Patches
  langs:
  - csharp
  - vb
  name: Owners
  nameWithType: Patches.Owners
  fullName: Harmony.Patches.Owners
  type: Property
  source:
    id: Owners
    path: ''
    startLine: 1236
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Gets the owners.
  example: []
  syntax:
    content: public ReadOnlyCollection<string> Owners { get; }
    parameters: []
    return:
      type: ReadOnlyCollection{System.String}
      description: The owners.
    content.vb: Public ReadOnly Property Owners As ReadOnlyCollection(Of String)
  overload: Harmony.Patches.Owners*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Harmony.Patches.#ctor(Patch[],Patch[],Patch[])
  commentId: M:Harmony.Patches.#ctor(Patch[],Patch[],Patch[])
  id: '#ctor(Patch[],Patch[],Patch[])'
  parent: Harmony.Patches
  langs:
  - csharp
  - vb
  name: Patches(Patch[], Patch[], Patch[])
  nameWithType: Patches.Patches(Patch[], Patch[], Patch[])
  fullName: Harmony.Patches.Patches(Patch[], Patch[], Patch[])
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 1253
  assemblies:
  - cs.temp.dll
  namespace: Harmony
  summary: Constructor.
  example: []
  syntax:
    content: public Patches(Patch[] prefixes, Patch[] postfixes, Patch[] transpilers)
    parameters:
    - id: prefixes
      type: Patch[]
      description: The prefixes.
    - id: postfixes
      type: Patch[]
      description: The postfixes.
    - id: transpilers
      type: Patch[]
      description: The transpilers.
    content.vb: Public Sub New(prefixes As Patch(), postfixes As Patch(), transpilers As Patch())
  overload: Harmony.Patches.#ctor*
  nameWithType.vb: Patches.Patches(Patch(), Patch(), Patch())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Harmony.Patches.Patches(Patch(), Patch(), Patch())
  name.vb: Patches(Patch(), Patch(), Patch())
references:
- uid: Harmony
  commentId: N:Harmony
  name: Harmony
  nameWithType: Harmony
  fullName: Harmony
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: ReadOnlyCollection{Patch}
  commentId: '!:ReadOnlyCollection{Patch}'
  definition: ReadOnlyCollection`1
  name: ReadOnlyCollection<Patch>
  nameWithType: ReadOnlyCollection<Patch>
  fullName: ReadOnlyCollection<Patch>
  nameWithType.vb: ReadOnlyCollection(Of Patch)
  fullName.vb: ReadOnlyCollection(Of Patch)
  name.vb: ReadOnlyCollection(Of Patch)
  spec.csharp:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Patch
    name: Patch
    nameWithType: Patch
    fullName: Patch
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Patch
    name: Patch
    nameWithType: Patch
    fullName: Patch
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<>
  nameWithType: ReadOnlyCollection<>
  fullName: ReadOnlyCollection<>
  nameWithType.vb: ReadOnlyCollection(Of )
  fullName.vb: ReadOnlyCollection(Of )
  name.vb: ReadOnlyCollection(Of )
  spec.csharp:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Harmony.Patches.Owners*
  commentId: Overload:Harmony.Patches.Owners
  name: Owners
  nameWithType: Patches.Owners
  fullName: Harmony.Patches.Owners
- uid: ReadOnlyCollection{System.String}
  commentId: '!:ReadOnlyCollection{System.String}'
  definition: ReadOnlyCollection`1
  name: ReadOnlyCollection<String>
  nameWithType: ReadOnlyCollection<String>
  fullName: ReadOnlyCollection<System.String>
  nameWithType.vb: ReadOnlyCollection(Of String)
  fullName.vb: ReadOnlyCollection(Of System.String)
  name.vb: ReadOnlyCollection(Of String)
  spec.csharp:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Harmony.Patches.#ctor*
  commentId: Overload:Harmony.Patches.#ctor
  name: Patches
  nameWithType: Patches.Patches
  fullName: Harmony.Patches.Patches
- uid: Patch[]
  isExternal: true
  name: Patch[]
  nameWithType: Patch[]
  fullName: Patch[]
  nameWithType.vb: Patch()
  fullName.vb: Patch()
  name.vb: Patch()
  spec.csharp:
  - uid: Patch
    name: Patch
    nameWithType: Patch
    fullName: Patch
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Patch
    name: Patch
    nameWithType: Patch
    fullName: Patch
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
