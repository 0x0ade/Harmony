using System;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.InteropServices;

namespace HarmonyLib
{
	internal class LeaveTry
	{
		public override string ToString()
		{
			return "(autogenerated)";
		}
	}

	internal class Emitter
	{
		static readonly GetterHandler<ILGenerator, int> codeLenGetter = FastAccess.CreateFieldGetter<ILGenerator, int>("code_len", "m_length");
		static readonly GetterHandler<ILGenerator, LocalBuilder[]> localsGetter = FastAccess.CreateFieldGetter<ILGenerator, LocalBuilder[]>("locals");

		readonly ILGenerator il;
		int offset;

		internal Emitter(ILGenerator il)
		{
			this.il = il;

		}

		internal static string CodePos(int offset)
		{
			return string.Format("L_{0:x4}: ", offset);
		}

		internal string CodePos()
		{
			return CodePos(offset);
		}

		void IncreaseOffset(OpCode opcode, object operand = null)
		{
			offset += opcode.Size;

			switch (opcode.OperandType)
			{
				case OperandType.InlineSwitch:
					offset += (1 + ((Array)operand).Length) * 4;
					break;

				case OperandType.InlineI8:
				case OperandType.InlineR:
					offset += 8;
					break;

				case OperandType.InlineBrTarget:
				case OperandType.InlineField:
				case OperandType.InlineI:
				case OperandType.InlineMethod:
				case OperandType.InlineSig:
				case OperandType.InlineString:
				case OperandType.InlineTok:
				case OperandType.InlineType:
				case OperandType.ShortInlineR:
					offset += 4;
					break;

				case OperandType.InlineVar:
					offset += 2;
					break;

				case OperandType.ShortInlineBrTarget:
				case OperandType.ShortInlineI:
				case OperandType.ShortInlineVar:
					offset += 1;
					break;
			}
		}

		internal void LogComment(string comment)
		{
			var str = string.Format("{0}// {1}", CodePos(), comment);
			FileLog.LogBuffered(str);
		}

		internal void LogIL(OpCode opCode, object argument)
		{
			if (Harmony.DEBUG)
			{
				var argStr = FormatArgument(argument);
				var space = argStr.Length > 0 ? " " : "";
				FileLog.LogBuffered(string.Format("{0}{1}{2}{3}", CodePos(), opCode, space, argStr));
			}
		}

		internal LocalBuilder[] AllLocalVariables()
		{
			return localsGetter != null ? localsGetter(il) : new LocalBuilder[0];
		}

		internal static void LogLocalVariable(LocalBuilder variable)
		{
			if (Harmony.DEBUG)
			{
				var str = string.Format("{0}Local var {1}: {2}{3}", CodePos(0), variable.LocalIndex, variable.LocalType.FullName, variable.IsPinned ? "(pinned)" : "");
				FileLog.LogBuffered(str);
			}
		}

		internal static string FormatArgument(object argument)
		{
			if (argument == null) return "NULL";
			var type = argument.GetType();

			var method = argument as MethodInfo;
			if (method != null)
				return ((MethodInfo)argument).FullDescription();

			if (type == typeof(string))
				return $"\"{argument}\"";
			if (type == typeof(Label))
				return $"Label{((Label)argument).GetHashCode()}";
			if (type == typeof(Label[]))
				return $"Labels{string.Join(",", ((Label[])argument).Select(l => l.GetHashCode().ToString()).ToArray())}";
			if (type == typeof(LocalBuilder))
				return $"{((LocalBuilder)argument).LocalIndex} ({((LocalBuilder)argument).LocalType})";

			return argument.ToString().Trim();
		}

		internal void MarkLabel(Label label)
		{
			if (Harmony.DEBUG) FileLog.LogBuffered(CodePos() + FormatArgument(label));
			il.MarkLabel(label);
		}

		internal void MarkBlockBefore(ExceptionBlock block, out Label? label)
		{
			label = null;
			switch (block.blockType)
			{
				case ExceptionBlockType.BeginExceptionBlock:
					if (Harmony.DEBUG)
					{
						FileLog.LogBuffered(".try");
						FileLog.LogBuffered("{");
						FileLog.ChangeIndent(1);
					}
					label = il.BeginExceptionBlock();
					return;

				case ExceptionBlockType.BeginCatchBlock:
					if (Harmony.DEBUG)
					{
						// fake log a LEAVE code since BeginCatchBlock() does add it
						LogIL(OpCodes.Leave, new LeaveTry());

						FileLog.ChangeIndent(-1);
						FileLog.LogBuffered("} // end try");

						FileLog.LogBuffered($".catch {block.catchType}");
						FileLog.LogBuffered("{");
						FileLog.ChangeIndent(1);
					}
					il.BeginCatchBlock(block.catchType);
					return;

				case ExceptionBlockType.BeginExceptFilterBlock:
					if (Harmony.DEBUG)
					{
						// fake log a LEAVE code since BeginCatchBlock() does add it
						LogIL(OpCodes.Leave, new LeaveTry());

						FileLog.ChangeIndent(-1);
						FileLog.LogBuffered("} // end try");

						FileLog.LogBuffered(".filter");
						FileLog.LogBuffered("{");
						FileLog.ChangeIndent(1);
					}
					il.BeginExceptFilterBlock();
					return;

				case ExceptionBlockType.BeginFaultBlock:
					if (Harmony.DEBUG)
					{
						// fake log a LEAVE code since BeginCatchBlock() does add it
						LogIL(OpCodes.Leave, new LeaveTry());

						FileLog.ChangeIndent(-1);
						FileLog.LogBuffered("} // end try");

						FileLog.LogBuffered(".fault");
						FileLog.LogBuffered("{");
						FileLog.ChangeIndent(1);
					}
					il.BeginFaultBlock();
					return;

				case ExceptionBlockType.BeginFinallyBlock:
					if (Harmony.DEBUG)
					{
						// fake log a LEAVE code since BeginCatchBlock() does add it
						LogIL(OpCodes.Leave, new LeaveTry());

						FileLog.ChangeIndent(-1);
						FileLog.LogBuffered("} // end try");

						FileLog.LogBuffered(".finally");
						FileLog.LogBuffered("{");
						FileLog.ChangeIndent(1);
					}
					il.BeginFinallyBlock();
					return;
			}
		}

		internal void MarkBlockAfter(ExceptionBlock block)
		{
			if (block.blockType == ExceptionBlockType.EndExceptionBlock)
			{
				if (Harmony.DEBUG)
				{
					// fake log a LEAVE code since BeginCatchBlock() does add it
					LogIL(OpCodes.Leave, new LeaveTry());

					FileLog.ChangeIndent(-1);
					FileLog.LogBuffered("} // end handler");
				}
				il.EndExceptionBlock();
			}
		}

		internal void Emit(OpCode opcode)
		{
			if (Harmony.DEBUG) FileLog.LogBuffered(CodePos() + opcode);
			il.Emit(opcode);
			IncreaseOffset(opcode);
		}

		internal void Emit(OpCode opcode, LocalBuilder local)
		{
			LogIL(opcode, local);
			il.Emit(opcode, local);
			IncreaseOffset(opcode, local);
		}

		internal void Emit(OpCode opcode, FieldInfo field)
		{
			LogIL(opcode, field);
			il.Emit(opcode, field);
			IncreaseOffset(opcode, field);
		}

		internal void Emit(OpCode opcode, Label[] labels)
		{
			LogIL(opcode, labels);
			il.Emit(opcode, labels);
			IncreaseOffset(opcode, labels);
		}

		internal void Emit(OpCode opcode, Label label)
		{
			LogIL(opcode, label);
			il.Emit(opcode, label);
			IncreaseOffset(opcode, label);
		}

		internal void Emit(OpCode opcode, string str)
		{
			LogIL(opcode, str);
			il.Emit(opcode, str);
			IncreaseOffset(opcode, str);
		}

		internal void Emit(OpCode opcode, float arg)
		{
			LogIL(opcode, arg);
			il.Emit(opcode, arg);
			IncreaseOffset(opcode, arg);
		}

		internal void Emit(OpCode opcode, byte arg)
		{
			LogIL(opcode, arg);
			il.Emit(opcode, arg);
			IncreaseOffset(opcode, arg);
		}

		internal void Emit(OpCode opcode, sbyte arg)
		{
			LogIL(opcode, arg);
			il.Emit(opcode, arg);
			IncreaseOffset(opcode, arg);
		}

		internal void Emit(OpCode opcode, double arg)
		{
			LogIL(opcode, arg);
			il.Emit(opcode, arg);
			IncreaseOffset(opcode, arg);
		}

		internal void Emit(OpCode opcode, int arg)
		{
			LogIL(opcode, arg);
			il.Emit(opcode, arg);
			IncreaseOffset(opcode, arg);
		}

		internal void Emit(OpCode opcode, MethodInfo meth)
		{
			LogIL(opcode, meth);
			il.Emit(opcode, meth);
			IncreaseOffset(opcode, meth);
		}

		internal void Emit(OpCode opcode, short arg)
		{
			LogIL(opcode, arg);
			il.Emit(opcode, arg);
			IncreaseOffset(opcode, arg);
		}

		internal void Emit(OpCode opcode, SignatureHelper signature)
		{
			LogIL(opcode, signature);
			il.Emit(opcode, signature);
			IncreaseOffset(opcode, signature);
		}

		internal void Emit(OpCode opcode, ConstructorInfo con)
		{
			LogIL(opcode, con);
			il.Emit(opcode, con);
			IncreaseOffset(opcode, con);
		}

		internal void Emit(OpCode opcode, Type cls)
		{
			LogIL(opcode, cls);
			il.Emit(opcode, cls);
			IncreaseOffset(opcode, cls);
		}

		internal void Emit(OpCode opcode, long arg)
		{
			LogIL(opcode, arg);
			il.Emit(opcode, arg);
			IncreaseOffset(opcode, arg);
		}

		internal void EmitCall(OpCode opcode, MethodInfo methodInfo, Type[] optionalParameterTypes)
		{
			if (Harmony.DEBUG) FileLog.LogBuffered(string.Format("{0}Call {1} {2} {3}", CodePos(), opcode, methodInfo, optionalParameterTypes));
			il.EmitCall(opcode, methodInfo, optionalParameterTypes);
			IncreaseOffset(opcode, methodInfo);
		}

#if NETSTANDARD2_0 || NETCOREAPP2_0
#else
		internal void EmitCalli(OpCode opcode, CallingConvention unmanagedCallConv, Type returnType, Type[] parameterTypes)
		{
			if (Harmony.DEBUG) FileLog.LogBuffered(string.Format("{0}Calli {1} {2} {3} {4}", CodePos(), opcode, unmanagedCallConv, returnType, parameterTypes));
			il.EmitCalli(opcode, unmanagedCallConv, returnType, parameterTypes);
			IncreaseOffset(OpCodes.Calli);
		}
#endif

		internal void EmitCalli(OpCode opcode, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes)
		{
			if (Harmony.DEBUG) FileLog.LogBuffered(string.Format("{0}Calli {1} {2} {3} {4} {5}", CodePos(), opcode, callingConvention, returnType, parameterTypes, optionalParameterTypes));
			il.EmitCalli(opcode, callingConvention, returnType, parameterTypes, optionalParameterTypes);
			IncreaseOffset(OpCodes.Calli);
		}
	}
}